from typing_extensions import TypedDict
from typing_extensions import Annotated
from langchain_community.utilities import SQLDatabase
from langchain_community.tools.sql_database.tool import QuerySQLDatabaseTool
from langchain_core.prompts import PromptTemplate
from langgraph.prebuilt import create_react_agent
from langgraph.checkpoint.memory import MemorySaver
from sqlalchemy import create_engine
from llm.azure_llm import create_azure_chat_llm
import json
import pandas as pd
from agents.agent_predict_tools import predict_overdue_risk, forecast_liquidity_risk
import ast
from utils import get_column_names

# CONFIG (memory)
memory = MemorySaver()
config = {"configurable": {"thread_id": "2"}}

################################ BANCOS DE DADOS ################################
db_name = "db/aa-finance-predict.db"
engine = create_engine(f"sqlite:///{db_name}")
db = SQLDatabase(engine)

################################ MODELO ################################
llm = create_azure_chat_llm()

################################ PROMPT ################################
# Query prompt template
with open("inputs/Prompts/prompt_query_predict_v2.txt", "r", encoding='utf-8') as file:
    query_prompt = file.read()
    query_prompt_template = PromptTemplate.from_template(query_prompt)
file.close()

################################ STATES ################################
class State(TypedDict):
    question: str
    query: str
    result: str
    predict: str
    answer: str
    increase_only: bool  # Added for predict_overdue_risk
    threshold: float  # Added for forecast_liquidity_risk

class QueryOutput(TypedDict):
    """Generated SQL query."""
    query: Annotated[str, ..., "Syntactically valid SQL query."]

################################ TOOLS ################################
def write_query(state: State):
    """
    Generate a syntactically correct SQL query to retrieve relevant data for the user's question.

    Args:
        state (State): The current state of the interaction, including the user's question.

    Returns:
        dict: A dictionary containing the generated SQL query string under the 'query' key.
    """
    prompt = query_prompt_template.invoke(
        {
            "dialect": db.dialect,
            "top_k": 10,
            "tables_info": "\n".join([db.get_table_info([table_name]) for table_name in db.get_usable_table_names()]),
            "input": state["question"],
        }
    )
    structured_llm = llm.with_structured_output(QueryOutput)
    result = structured_llm.invoke(prompt, config=config)
    print(result["query"])
    return {"query": result["query"]}


def execute_query(state: State):
    """
    Execute the SQL query generated by the write_query tool.

    Args:
        state (State): The current state containing the SQL query.

    Returns:
        dict: A dictionary with the query result under the 'result' key.
    """
    execute_query_tool = QuerySQLDatabaseTool(db=db)
    return {"result": execute_query_tool.invoke(state["query"], config=config)}


def generate_answer(state: State):
    """
    Generate a final answer for the user by combining the question, SQL query, and query results.
    Always formats the output in Markdown.

    Args:
        state (State): The state containing the user's question, SQL query, query result, and optional prediction result.

    Returns:
        dict: A dictionary containing the Markdown-formatted answer under the 'answer' key.
    """
    print(state)
    prompt = (
        "Given the following user question, corresponding SQL query, "
        "and SQL result, answer the user question.\n\n"
        "Under no circumstances should complete, partial, or any tabular format tables be displayed in the final output."
        "Always use 'R$ ' to cash values."
        "Use emojis if you need."
        "Always format the answer in Markdown.\n\n"
        f'Question: {state["question"]}\n'
        f'SQL Query: {state["query"]}\n'
        f'SQL Result: {state["result"]}\n'
        f'Prediction Result: {state["predict"]}'
    )
    response = llm.invoke(prompt, config=config)
    return {"answer": response.content}


def predict_overdue_risk_tool(state: State):
    """
    Predict the risk of overdue payments using historical accounts receivable data.

    This tool parses the query results into a DataFrame and applies a prediction model.

    Args:
        state (State): The current state containing the raw SQL result and prediction options.

    Returns:
        dict: A dictionary with the prediction output under the 'predict' key.
    """
    raw_result = state["result"]
    rows = ast.literal_eval(raw_result)
    columns = get_column_names(db, "trades_receivable")
    df = pd.DataFrame(rows, columns=columns)
    df["month_year"] = pd.to_datetime(df["month_year"])
    increase_only = state.get("increase_only", True)
    prediction = predict_overdue_risk(df, increase_only)
    return {"predict": prediction}


def forecast_liquidity_risk_tool(state: State):
    """
    Forecast liquidity risk based on historical working capital data.

    This tool parses the SQL query result, builds a DataFrame, and applies
    a machine learning model to generate liquidity risk predictions.

    Args:
        state (State): The current state containing the raw SQL result.

    Returns:
        dict: A dictionary with the forecast output under the 'predict' key.
    """
    raw_result = state["result"]
    rows = ast.literal_eval(raw_result)
    columns = get_column_names(db, "working_capital")
    df = pd.DataFrame(rows, columns=columns)
    forecast = forecast_liquidity_risk(df)
    return {"predict": forecast}


# Adding the new tools to the list
tools = [write_query, execute_query, generate_answer, predict_overdue_risk_tool, forecast_liquidity_risk_tool]

################################ REACT AGENT ################################
graph = create_react_agent(llm, tools=tools, checkpointer=memory)

################################ MAIN ################################
def analytics_accelerator_function(user_command):
    inputs = {"messages": user_command}
    stream = graph.stream(inputs, stream_mode="values", config=config)
    for s in stream:
        message = s["messages"][-1]
        message_content = message.content
        print(message_content)
        if ("answer" in message_content):
            answer_dict_str = message_content.replace("\n", "\\n")
            answer_dict = json.loads(answer_dict_str)
            return(answer_dict["answer"])


